// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PBFrameworkAnimation
import CoreGraphics
import CoreText
import Foundation
@_exported import PBFrameworkAnimation
import QuartzCore
import Swift
import UIKit
public typealias AnimationFrameTime = CoreGraphics.CGFloat
public typealias AnimationProgressTime = CoreGraphics.CGFloat
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
final public class PointValueProvider : PBFrameworkAnimation.AnyValueProvider {
  public typealias PointValueBlock = (CoreGraphics.CGFloat) -> CoreGraphics.CGPoint
  final public var point: CoreGraphics.CGPoint {
    get
    set
  }
  public init(block: @escaping PBFrameworkAnimation.PointValueProvider.PointValueBlock)
  public init(_ point: CoreGraphics.CGPoint)
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreGraphics.CGFloat) -> Swift.Bool
  final public func value(frame: CoreGraphics.CGFloat) -> Any
  @objc deinit
}
@objc final public class AnimatedSwitch : PBFrameworkAnimation.AnimatedControl {
  public enum CancelBehavior {
    case reverse
    case none
    public static func == (a: PBFrameworkAnimation.AnimatedSwitch.CancelBehavior, b: PBFrameworkAnimation.AnimatedSwitch.CancelBehavior) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public var isOn: Swift.Bool {
    get
    set
  }
  final public var cancelBehavior: PBFrameworkAnimation.AnimatedSwitch.CancelBehavior
  final public func setIsOn(_ isOn: Swift.Bool, animated: Swift.Bool, shouldFireHaptics: Swift.Bool = true)
  final public func setProgressForState(fromProgress: PBFrameworkAnimation.AnimationProgressTime, toProgress: PBFrameworkAnimation.AnimationProgressTime, forOnState: Swift.Bool)
  override public init(animation: PBFrameworkAnimation.Animation)
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override final public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  override final public func animationDidSet()
  @objc deinit
}
extension Color : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension CALayer {
  public func logLayerTree(withIndent: Swift.Int = 0)
}
public enum ColorFormatDenominator {
  case One
  case OneHundred
  case TwoFiftyFive
  public static func == (a: PBFrameworkAnimation.ColorFormatDenominator, b: PBFrameworkAnimation.ColorFormatDenominator) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct Color {
  public var r: Swift.Double
  public var g: Swift.Double
  public var b: Swift.Double
  public var a: Swift.Double
  public init(r: Swift.Double, g: Swift.Double, b: Swift.Double, a: Swift.Double, denominator: PBFrameworkAnimation.ColorFormatDenominator = .One)
}
public typealias LottieCompletionBlock = (Swift.Bool) -> Swift.Void
extension UIColor {
  public var lottieColorValue: PBFrameworkAnimation.Color {
    get
  }
}
public class LRUAnimationCache : PBFrameworkAnimation.AnimationCacheProvider {
  public init()
  public func clearCache()
  public static let sharedCache: PBFrameworkAnimation.LRUAnimationCache
  public var cacheSize: Swift.Int
  public func animation(forKey: Swift.String) -> PBFrameworkAnimation.Animation?
  public func setAnimation(_ animation: PBFrameworkAnimation.Animation, forKey: Swift.String)
  public func notifyImageChanged(imageName: Swift.String)
  public func clearEditedImage(name: Swift.String)
  public func imageChanged(name: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc final public class CompatibleAnimation : ObjectiveC.NSObject {
  @objc public init(name: Swift.String, bundle: Foundation.Bundle = Bundle.main)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class CompatibleAnimationView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc final public var compatibleAnimation: PBFrameworkAnimation.CompatibleAnimation? {
    @objc get
    @objc set
  }
  @objc final public var loopAnimationCount: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc override final public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc final public var shouldRasterizeWhenIdle: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var currentProgress: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var currentTime: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc final public var currentFrame: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var realtimeAnimationFrame: CoreGraphics.CGFloat {
    @objc get
  }
  @objc final public var realtimeAnimationProgress: CoreGraphics.CGFloat {
    @objc get
  }
  @objc final public var animationSpeed: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var respectAnimationFrameRate: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public func play()
  @objc final public func play(completion: ((Swift.Bool) -> Swift.Void)?)
  @objc final public func play(fromProgress: CoreGraphics.CGFloat, toProgress: CoreGraphics.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc final public func play(fromFrame: CoreGraphics.CGFloat, toFrame: CoreGraphics.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc final public func play(fromMarker: Swift.String, toMarker: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc final public func stop()
  @objc final public func pause()
  @objc final public func reloadImages()
  @objc final public func forceDisplayUpdate()
  @objc final public func getValue(for keypath: PBFrameworkAnimation.CompatibleAnimationKeypath, atFrame: CoreGraphics.CGFloat) -> Any?
  @objc final public func logHierarchyKeypaths()
  @objc final public func addSubview(_ subview: PBFrameworkAnimation.AnimationSubview, forLayerAt keypath: PBFrameworkAnimation.CompatibleAnimationKeypath)
  @objc final public func convert(rect: CoreGraphics.CGRect, toLayerAt keypath: PBFrameworkAnimation.CompatibleAnimationKeypath?) -> CoreGraphics.CGRect
  @objc final public func convert(point: CoreGraphics.CGPoint, toLayerAt keypath: PBFrameworkAnimation.CompatibleAnimationKeypath?) -> CoreGraphics.CGPoint
  @objc final public func progressTime(forMarker named: Swift.String) -> CoreGraphics.CGFloat
  @objc final public func frameTime(forMarker named: Swift.String) -> CoreGraphics.CGFloat
  @objc deinit
}
@objc open class AnimatedControl : UIKit.UIControl {
  public var animation: PBFrameworkAnimation.Animation? {
    get
    set
  }
  public func setLayer(named: Swift.String, forState: UIKit.UIControl.State)
  public func setValueProvider(_ valueProvider: PBFrameworkAnimation.AnyValueProvider, keypath: PBFrameworkAnimation.AnimationKeypath)
  public init(animation: PBFrameworkAnimation.Animation)
  @objc dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  open func animationDidSet()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
final public class ColorValueProvider : PBFrameworkAnimation.AnyValueProvider {
  public typealias ColorValueBlock = (CoreGraphics.CGFloat) -> PBFrameworkAnimation.Color
  final public var color: PBFrameworkAnimation.Color {
    get
    set
  }
  public init(block: @escaping PBFrameworkAnimation.ColorValueProvider.ColorValueBlock)
  public init(_ color: PBFrameworkAnimation.Color)
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreGraphics.CGFloat) -> Swift.Bool
  final public func value(frame: CoreGraphics.CGFloat) -> Any
  @objc deinit
}
public protocol AnyValueProvider {
  var valueType: Any.Type { get }
  func hasUpdate(frame: PBFrameworkAnimation.AnimationFrameTime) -> Swift.Bool
  func value(frame: PBFrameworkAnimation.AnimationFrameTime) -> Any
}
final public class SizeValueProvider : PBFrameworkAnimation.AnyValueProvider {
  public typealias SizeValueBlock = (CoreGraphics.CGFloat) -> CoreGraphics.CGSize
  final public var size: CoreGraphics.CGSize {
    get
    set
  }
  public init(block: @escaping PBFrameworkAnimation.SizeValueProvider.SizeValueBlock)
  public init(_ size: CoreGraphics.CGSize)
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreGraphics.CGFloat) -> Swift.Bool
  final public func value(frame: CoreGraphics.CGFloat) -> Any
  @objc deinit
}
@objc final public class CompatibleAnimationKeypath : ObjectiveC.NSObject {
  @objc public init(keypath: Swift.String)
  @objc public init(keys: [Swift.String])
  final public let animationKeypath: PBFrameworkAnimation.AnimationKeypath
  @objc override dynamic public init()
  @objc deinit
}
public struct AnimationKeypath {
  public init(keypath: Swift.String)
  public init(keys: [Swift.String])
}
@objc final public class AnimationSubview : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class LottieView : UIKit.UIView {
  @objc override dynamic open func didMoveToWindow()
  @objc override dynamic open var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Animation {
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationCache: PBFrameworkAnimation.AnimationCacheProvider? = nil) -> PBFrameworkAnimation.Animation?
  public static func filepath(_ filepath: Swift.String, animationCache: PBFrameworkAnimation.AnimationCacheProvider? = nil) -> PBFrameworkAnimation.Animation?
  public typealias DownloadClosure = (PBFrameworkAnimation.Animation?) -> Swift.Void
  public static func loadedFrom(url: Foundation.URL, closure: @escaping PBFrameworkAnimation.Animation.DownloadClosure, animationCache: PBFrameworkAnimation.AnimationCacheProvider?)
  public func progressTime(forMarker named: Swift.String) -> PBFrameworkAnimation.AnimationProgressTime?
  public func frameTime(forMarker named: Swift.String) -> PBFrameworkAnimation.AnimationFrameTime?
  public func progressTime(forFrame frameTime: PBFrameworkAnimation.AnimationFrameTime) -> PBFrameworkAnimation.AnimationProgressTime
  public func frameTime(forProgress progressTime: PBFrameworkAnimation.AnimationProgressTime) -> PBFrameworkAnimation.AnimationFrameTime
  public func time(forFrame frameTime: PBFrameworkAnimation.AnimationFrameTime) -> Foundation.TimeInterval
  public func frameTime(forTime time: Foundation.TimeInterval) -> PBFrameworkAnimation.AnimationFrameTime
  public var duration: Foundation.TimeInterval {
    get
  }
  public var bounds: CoreGraphics.CGRect {
    get
  }
  public var size: CoreGraphics.CGSize {
    get
  }
}
public class ImageAsset : PBFrameworkAnimation.Asset {
  final public let name: Swift.String
  final public let directory: Swift.String
  final public let width: Swift.Double
  final public let height: Swift.Double
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class Asset : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public protocol AnimationTextProvider : AnyObject {
  func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
}
final public class DictionaryTextProvider : PBFrameworkAnimation.AnimationTextProvider {
  public init(_ values: [Swift.String : Swift.String])
  final public func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
final public class DefaultTextProvider : PBFrameworkAnimation.AnimationTextProvider {
  final public func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
  public init()
  @objc deinit
}
public class BundleImageProvider : PBFrameworkAnimation.AnimationImageProvider {
  public init(bundle: Foundation.Bundle, searchPath: Swift.String?)
  public func imageForAsset(asset: PBFrameworkAnimation.ImageAsset) -> CoreGraphics.CGImage?
  @objc deinit
}
public class FilepathImageProvider : PBFrameworkAnimation.AnimationImageProvider {
  public init(filepath: Swift.String)
  public init(filepath: Foundation.URL)
  public func imageForAsset(asset: PBFrameworkAnimation.ImageAsset) -> CoreGraphics.CGImage?
  @objc deinit
}
public enum AnimationMode {
  case preview
  case video
  public static func == (a: PBFrameworkAnimation.AnimationMode, b: PBFrameworkAnimation.AnimationMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum LottieBackgroundBehavior {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  public static func == (a: PBFrameworkAnimation.LottieBackgroundBehavior, b: PBFrameworkAnimation.LottieBackgroundBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum LottieLoopMode {
  case playOnce
  case loop
  case autoReverse
  case `repeat`(Swift.Float)
  case repeatBackwards(Swift.Float)
}
extension LottieLoopMode : Swift.Equatable {
  public static func == (lhs: PBFrameworkAnimation.LottieLoopMode, rhs: PBFrameworkAnimation.LottieLoopMode) -> Swift.Bool
}
@objc @IBDesignable final public class AnimationView : PBFrameworkAnimation.LottieView {
  final public var animationMode: PBFrameworkAnimation.AnimationMode
  final public var animation: PBFrameworkAnimation.Animation? {
    get
    set
  }
  final public var backgroundBehavior: PBFrameworkAnimation.LottieBackgroundBehavior
  final public var imageProvider: PBFrameworkAnimation.AnimationImageProvider {
    get
    set
  }
  final public var textProvider: PBFrameworkAnimation.AnimationTextProvider {
    get
    set
  }
  final public var isAnimationPlaying: Swift.Bool {
    get
  }
  final public var loopMode: PBFrameworkAnimation.LottieLoopMode {
    get
    set
  }
  final public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  final public var currentProgress: PBFrameworkAnimation.AnimationProgressTime {
    get
    set
  }
  final public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  final public var currentFrame: PBFrameworkAnimation.AnimationFrameTime {
    get
    set
  }
  final public var realtimeAnimationFrame: PBFrameworkAnimation.AnimationFrameTime {
    get
  }
  final public var realtimeAnimationProgress: PBFrameworkAnimation.AnimationProgressTime {
    get
  }
  final public var animationSpeed: CoreGraphics.CGFloat {
    get
    set
  }
  final public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  final public var viewportFrame: CoreGraphics.CGRect? {
    get
    set
  }
  final public func imageNames(for frame: CoreGraphics.CGFloat) -> [Swift.String]
  final public func play(completion: PBFrameworkAnimation.LottieCompletionBlock? = nil)
  final public func play(fromProgress: PBFrameworkAnimation.AnimationProgressTime? = nil, toProgress: PBFrameworkAnimation.AnimationProgressTime, loopMode: PBFrameworkAnimation.LottieLoopMode? = nil, completion: PBFrameworkAnimation.LottieCompletionBlock? = nil)
  final public func play(fromFrame: PBFrameworkAnimation.AnimationFrameTime? = nil, toFrame: PBFrameworkAnimation.AnimationFrameTime, loopMode: PBFrameworkAnimation.LottieLoopMode? = nil, completion: PBFrameworkAnimation.LottieCompletionBlock? = nil)
  final public func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, loopMode: PBFrameworkAnimation.LottieLoopMode? = nil, completion: PBFrameworkAnimation.LottieCompletionBlock? = nil)
  final public func stop()
  final public func pause()
  final public func reloadImages()
  final public func forceDisplayUpdate()
  final public func setValueProvider(_ valueProvider: PBFrameworkAnimation.AnyValueProvider, keypath: PBFrameworkAnimation.AnimationKeypath)
  final public func getValue(for keypath: PBFrameworkAnimation.AnimationKeypath, atFrame: PBFrameworkAnimation.AnimationFrameTime?) -> Any?
  final public func logHierarchyKeypaths()
  final public func addSubview(_ subview: PBFrameworkAnimation.AnimationSubview, forLayerAt keypath: PBFrameworkAnimation.AnimationKeypath)
  final public func convert(_ rect: CoreGraphics.CGRect, toLayerAt keypath: PBFrameworkAnimation.AnimationKeypath?) -> CoreGraphics.CGRect?
  final public func convert(_ point: CoreGraphics.CGPoint, toLayerAt keypath: PBFrameworkAnimation.AnimationKeypath?) -> CoreGraphics.CGPoint?
  final public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: PBFrameworkAnimation.AnimationKeypath)
  final public func progressTime(forMarker named: Swift.String) -> PBFrameworkAnimation.AnimationProgressTime?
  final public func frameTime(forMarker named: Swift.String) -> PBFrameworkAnimation.AnimationFrameTime?
  public init(animation: PBFrameworkAnimation.Animation?, mode: PBFrameworkAnimation.AnimationMode, imageProvider: PBFrameworkAnimation.AnimationImageProvider? = nil, textProvider: PBFrameworkAnimation.AnimationTextProvider = DefaultTextProvider())
  @objc dynamic public init()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override final public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
}
final public class FloatValueProvider : PBFrameworkAnimation.AnyValueProvider {
  public typealias CGFloatValueBlock = (CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  final public var float: CoreGraphics.CGFloat {
    get
    set
  }
  public init(block: @escaping PBFrameworkAnimation.FloatValueProvider.CGFloatValueBlock)
  public init(_ float: CoreGraphics.CGFloat)
  final public var valueType: Any.Type {
    get
  }
  final public func hasUpdate(frame: CoreGraphics.CGFloat) -> Swift.Bool
  final public func value(frame: CoreGraphics.CGFloat) -> Any
  @objc deinit
}
public protocol AnimationCacheProvider {
  func animation(forKey: Swift.String) -> PBFrameworkAnimation.Animation?
  func setAnimation(_ animation: PBFrameworkAnimation.Animation, forKey: Swift.String)
  func clearCache()
}
extension Vector1D : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Vector3D : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Vector3D {
  public var pointValue: CoreGraphics.CGPoint {
    get
  }
  public var sizeValue: CoreGraphics.CGSize {
    get
  }
}
public protocol AnimationImageProvider {
  func imageForAsset(asset: PBFrameworkAnimation.ImageAsset) -> CoreGraphics.CGImage?
}
@objc final public class AnimatedButton : PBFrameworkAnimation.AnimatedControl {
  final public func setPlayRange(fromProgress: PBFrameworkAnimation.AnimationProgressTime, toProgress: PBFrameworkAnimation.AnimationProgressTime, event: UIKit.UIControl.Event)
  final public func setPlayRange(fromMarker fromName: Swift.String, toMarker toName: Swift.String, event: UIKit.UIControl.Event)
  override public init(animation: PBFrameworkAnimation.Animation)
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override final public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override final public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc deinit
}
public enum LayerType : Swift.Int, Swift.Codable {
  case precomp
  case solid
  case image
  case null
  case shape
  case text
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatteType : Swift.Int, Swift.Codable {
  case none
  case add
  case invert
  case unknown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum BlendMode : Swift.Int, Swift.Codable {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case hardLight
  case softLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct Vector1D {
  public init(_ value: Swift.Double)
}
public struct Vector3D {
  public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
}
public enum CoordinateSpace : Swift.Int, Swift.Codable {
  case type2d
  case type3d
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public class Animation : Swift.Codable {
  final public let startFrame: PBFrameworkAnimation.AnimationFrameTime
  final public let endFrame: PBFrameworkAnimation.AnimationFrameTime
  final public let framerate: Swift.Double
  public var markerNames: [Swift.String] {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension AnimationView {
  convenience public init(name: Swift.String, bundle: Foundation.Bundle = Bundle.main, imageProvider: PBFrameworkAnimation.AnimationImageProvider? = nil, animationCache: PBFrameworkAnimation.AnimationCacheProvider? = LRUAnimationCache.sharedCache)
  convenience public init(filePath: Swift.String, mode: PBFrameworkAnimation.AnimationMode, imageProvider: PBFrameworkAnimation.AnimationImageProvider? = nil, animationCache: PBFrameworkAnimation.AnimationCacheProvider? = LRUAnimationCache.sharedCache)
  convenience public init(url: Foundation.URL, imageProvider: PBFrameworkAnimation.AnimationImageProvider? = nil, closure: @escaping PBFrameworkAnimation.AnimationView.DownloadClosure, animationCache: PBFrameworkAnimation.AnimationCacheProvider? = LRUAnimationCache.sharedCache)
  public typealias DownloadClosure = (Swift.Error?) -> Swift.Void
}
extension PBFrameworkAnimation.AnimatedSwitch.CancelBehavior : Swift.Equatable {}
extension PBFrameworkAnimation.AnimatedSwitch.CancelBehavior : Swift.Hashable {}
extension PBFrameworkAnimation.ColorFormatDenominator : Swift.Equatable {}
extension PBFrameworkAnimation.ColorFormatDenominator : Swift.Hashable {}
extension PBFrameworkAnimation.AnimationMode : Swift.Hashable {}
extension PBFrameworkAnimation.LottieBackgroundBehavior : Swift.Equatable {}
extension PBFrameworkAnimation.LottieBackgroundBehavior : Swift.Hashable {}
extension PBFrameworkAnimation.LayerType : Swift.Equatable {}
extension PBFrameworkAnimation.LayerType : Swift.Hashable {}
extension PBFrameworkAnimation.LayerType : Swift.RawRepresentable {}
extension PBFrameworkAnimation.MatteType : Swift.Hashable {}
extension PBFrameworkAnimation.MatteType : Swift.RawRepresentable {}
extension PBFrameworkAnimation.BlendMode : Swift.Equatable {}
extension PBFrameworkAnimation.BlendMode : Swift.Hashable {}
extension PBFrameworkAnimation.BlendMode : Swift.RawRepresentable {}
extension PBFrameworkAnimation.CoordinateSpace : Swift.Equatable {}
extension PBFrameworkAnimation.CoordinateSpace : Swift.Hashable {}
extension PBFrameworkAnimation.CoordinateSpace : Swift.RawRepresentable {}
